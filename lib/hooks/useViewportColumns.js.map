{"version":3,"file":"useViewportColumns.js","sourceRoot":"","sources":["../../src/hooks/useViewportColumns.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAGhC,OAAO,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAa5F,MAAM,UAAU,kBAAkB,CAA2B,EAC3D,OAAO,EAAE,UAAU,EACnB,cAAc,EACd,YAAY,EACZ,aAAa,EACb,gBAAgB,EAChB,UAAU,EACoB;IAC9B,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE;QACxE,OAAO,gBAAgB,CAAQ;YAC7B,OAAO,EAAE,UAAU;YACnB,cAAc;YACd,aAAa;YACb,YAAY;YACZ,gBAAgB;SACjB,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;IAEhF,MAAM,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAqB,EAAE;QAC9E,OAAO,0BAA0B,CAC/B,OAAO,EACP,qBAAqB,EACrB,aAAa,EACb,UAAU,CACX,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,qBAAqB,EAAE,aAAa,CAAC,CAAC,CAAC;IAEhE,MAAM,eAAe,GAAG,OAAO,CAAC,GAAuC,EAAE;QACvE,OAAO,kBAAkB,CACvB,OAAO,EACP,mBAAmB,EACnB,iBAAiB,CAClB,CAAC;IACJ,CAAC,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC,CAAC;IAEtD,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,CAAC;AAC/E,CAAC","sourcesContent":["import { useMemo } from 'react';\n\nimport { CalculatedColumn } from '../types';\nimport { getColumnMetrics, getHorizontalRangeToRender, getViewportColumns } from '../utils';\nimport { DataGridProps } from '../DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> =\n  Pick<DataGridProps<R, K, SR>, 'columns'> &\n  Required<Required<Pick<DataGridProps<R, K, SR>, | 'minColumnWidth' | 'defaultFormatter'>>>;\n\ninterface ViewportColumnsArgs<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, K extends keyof R, SR>({\n  columns: rawColumns,\n  minColumnWidth,\n  columnWidths,\n  viewportWidth,\n  defaultFormatter,\n  scrollLeft\n}: ViewportColumnsArgs<R, K, SR>) {\n  const { columns, lastFrozenColumnIndex, totalColumnWidth } = useMemo(() => {\n    return getColumnMetrics<R, SR>({\n      columns: rawColumns,\n      minColumnWidth,\n      viewportWidth,\n      columnWidths,\n      defaultFormatter\n    });\n  }, [columnWidths, rawColumns, defaultFormatter, minColumnWidth, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    return getHorizontalRangeToRender(\n      columns,\n      lastFrozenColumnIndex,\n      viewportWidth,\n      scrollLeft\n    );\n  }, [scrollLeft, columns, lastFrozenColumnIndex, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return getViewportColumns(\n      columns,\n      colOverscanStartIdx,\n      colOverscanEndIdx\n    );\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex };\n}\n"]}