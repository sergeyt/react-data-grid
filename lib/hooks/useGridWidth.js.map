{"version":3,"file":"useGridWidth.js","sourceRoot":"","sources":["../../src/hooks/useGridWidth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAE1D,MAAM,UAAU,YAAY,CAAI,KAAc;IAC5C,MAAM,OAAO,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE9C,eAAe,CAAC,GAAG,EAAE;QACnB,kDAAkD;QAClD,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,OAAO;QACtC,SAAS,QAAQ;YACjB,kFAAkF;YAChF,YAAY,CAAC,OAAO,CAAC,OAAQ,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC;QACD,QAAQ,EAAE,CAAC;QAEX,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5C,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,OAAO,CAAC,OAAO,EAAE,KAAK,IAAI,SAAS,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import { useRef, useState, useLayoutEffect } from 'react';\n\nexport function useGridWidth<T>(width?: number): [React.RefObject<HTMLDivElement>, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    // Do not calculate the width if width is provided\n    if (typeof width === 'number') return;\n    function onResize() {\n    // Immediately re-render when the component is mounted to get valid columnMetrics.\n      setGridWidth(gridRef.current!.getBoundingClientRect().width);\n    }\n    onResize();\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [width]);\n\n  return [gridRef, width || gridWidth];\n}\n"]}