{"version":3,"file":"Row.js","sourceRoot":"","sources":["../src/Row.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEpC,SAAS,GAAG,CAAkB,EAoBJ;QApBI,EAC5B,YAAY,EAAE,YAAY,GAAG,IAAI,EACjC,SAAS,EACT,QAAQ,EACR,MAAM,EACN,aAAa,EACb,qBAAqB,EACrB,aAAa,EACb,kBAAkB,EAClB,GAAG,EACH,eAAe,EACf,iBAAiB,EACjB,UAAU,EACV,QAAQ,EACR,oBAAoB,EACpB,YAAY,EACZ,GAAG,EACH,eAAe,EAAE,YAAY,EAC7B,eAAe,EAAE,YAAY,OAEL,EADrB,KAAK,cAnBoB,8RAoB7B,CADS;IAER,SAAS,eAAe;QACtB,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAG,MAAM,EAAE;IACjC,CAAC;IAED,SAAS,GAAG,IAAI,CACd,SAAS,EACT,WAAW,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAC9C,EAAE,kBAAkB,EAAE,aAAa,EAAE,EACrC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,GAAG,GACd,SAAS,CACV,CAAC;IAEF,OAAO,CACL,2CACE,IAAI,EAAC,KAAK,mBACK,YAAY,mBACZ,YAAY,EAC3B,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,SAAS,CAAC,eAAe,EAAE,YAAY,CAAC,EACtD,KAAK,EAAE,EAAE,GAAG,EAAE,IACV,KAAK,GAER,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAC7B,oBAAC,YAAY,IACX,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,qBAAqB,EAAE,qBAAqB,EAC5C,GAAG,EAAE,GAAG,EACR,QAAQ,EAAE,aAAa,KAAK,MAAM,CAAC,GAAG,EACtC,aAAa,EAAE,kBAAkB,KAAK,MAAM,CAAC,GAAG,EAChD,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,QAAQ,EAClB,iBAAiB,EAAE,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,GAAG,MAAK,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,EACxF,UAAU,EAAE,UAAU,GACtB,CACH,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,GAAG,CAA2D,CAAC","sourcesContent":["import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowRendererProps } from './types';\nimport { wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>) {\n  function handleDragEnter() {\n    setDraggedOverRowIdx?.(rowIdx);\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    { 'rdg-row-selected': isRowSelected },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      className={className}\n      onMouseEnter={wrapEvent(handleDragEnter, onMouseEnter)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <CellRenderer\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          row={row}\n          isCopied={copiedCellIdx === column.idx}\n          isDraggedOver={draggedOverCellIdx === column.idx}\n          isRowSelected={isRowSelected}\n          eventBus={eventBus}\n          selectedCellProps={selectedCellProps?.idx === column.idx ? selectedCellProps : undefined}\n          onRowClick={onRowClick}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n"]}