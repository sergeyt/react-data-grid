{"version":3,"file":"Row.js","sourceRoot":"","sources":["../src/Row.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEpD,SAAS,GAAG,CAAkB,EAgBJ;QAhBI,EAC5B,YAAY,EAAE,YAAY,GAAG,IAAI,EACjC,SAAS,EACT,QAAQ,EACR,MAAM,EACN,aAAa,EACb,qBAAqB,EACrB,UAAU,EACV,GAAG,EACH,eAAe,EACf,WAAW,EACX,UAAU,EACV,MAAM,EACN,QAAQ,EACR,GAAG,OAEqB,EADrB,KAAK,cAfoB,+LAgB7B,CADS;IAER,SAAS,eAAe,CAAC,KAAsC;QAC7D,gCAAgC;QAChC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,SAAS,cAAc,CAAC,KAAsC;QAC5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC;IACzC,CAAC;IAED,SAAS,GAAG,IAAI,CACd,SAAS,EACT,WAAW,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAC9C,EAAE,kBAAkB,EAAE,aAAa,EAAE,EACrC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,GAAG,GACd,SAAS,CACV,CAAC;IAEF,sFAAsF;IACtF,sEAAsE;IACtE,iEAAiE;IACjE,OAAO,CACL,2CACE,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,SAAS,CAAC,eAAe,EAAE,WAAW,CAAC,EACpD,UAAU,EAAE,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC,EACjD,MAAM,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,EACzC,KAAK,EAAE,EAAE,GAAG,EAAE,IACV,KAAK,GAER,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAC7B,oBAAC,YAAY,IACX,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,qBAAqB,EAAE,qBAAqB,EAC5C,GAAG,EAAE,GAAG,EACR,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,UAAU,GACtB,CACH,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,GAAG,CAA2D,CAAC","sourcesContent":["import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowRendererProps } from './common/types';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  onRowClick,\n  row,\n  viewportColumns,\n  onDragEnter,\n  onDragOver,\n  onDrop,\n  rowClass,\n  top,\n  ...props\n}: RowRendererProps<R, SR>) {\n  function handleDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    // Prevent default to allow drop\n    event.preventDefault();\n    eventBus.dispatch('DRAG_ENTER', rowIdx);\n  }\n\n  function handleDragOver(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    { 'rdg-row-selected': isRowSelected },\n    rowClass?.(row),\n    className\n  );\n\n  // Regarding onDrop: the default in Firefox is to treat data in dataTransfer as a URL,\n  // and perform navigation on it, even if the data type used is 'text'.\n  // To bypass this, we need to capture and prevent the drop event.\n  return (\n    <div\n      className={className}\n      onDragEnter={wrapEvent(handleDragEnter, onDragEnter)}\n      onDragOver={wrapEvent(handleDragOver, onDragOver)}\n      onDrop={wrapEvent(preventDefault, onDrop)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <CellRenderer\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          row={row}\n          isRowSelected={isRowSelected}\n          eventBus={eventBus}\n          onRowClick={onRowClick}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n"]}