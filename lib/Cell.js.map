{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AACxD,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAE1D,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE1C,SAAS,IAAI,CAAQ,EAiBM,EAAE,GAA8B;QAjBtC,EACnB,SAAS,EACT,MAAM,EACN,QAAQ,EACR,aAAa,EACb,aAAa,EACb,qBAAqB,EACrB,GAAG,EACH,MAAM,EACN,QAAQ,EACR,iBAAiB,EACjB,UAAU,EACV,SAAS,EACT,OAAO,EACP,aAAa,EACb,aAAa,OAEY,EADtB,KAAK,cAhBW,wNAiBpB,CADS;IAER,MAAM,OAAO,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,iBAAiB,KAAK,SAAS,CAAC;IACnD,MAAM,SAAS,GAAG,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,IAAI,MAAK,MAAM,CAAC;IAErD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;IAC7B,SAAS,GAAG,IAAI,CACd,UAAU,EACV;QACE,iBAAiB,EAAE,MAAM,CAAC,MAAM;QAChC,sBAAsB,EAAE,MAAM,CAAC,GAAG,KAAK,qBAAqB;QAC5D,mBAAmB,EAAE,UAAU;QAC/B,iBAAiB,EAAE,QAAQ;QAC3B,uBAAuB,EAAE,aAAa;KACvC,EACD,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,EAC5D,SAAS,CACV,CAAC;IAEF,SAAS,UAAU,CAAC,UAAoB;QACtC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IAED,SAAS,WAAW;QAClB,UAAU,EAAE,CAAC;QACb,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;IACpC,CAAC;IAED,SAAS,iBAAiB;QACxB,UAAU,EAAE,CAAC;IACf,CAAC;IAED,SAAS,iBAAiB;QACxB,UAAU,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,SAAS,oBAAoB,CAAC,OAAgB,EAAE,YAAqB;QACnE,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,SAAS,cAAc;QACrB,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,KAAK,MAAM,EAAE;YAC1D,MAAM,KAAyC,iBAAiB,CAAC,oBAAoB,EAA/E,EAAE,kBAAkB,OAA2D,EAAtD,WAAW,cAApC,sBAAsC,CAAyC,CAAC;YACtF,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC,gBAAgB,IAAI,QAAQ,CAAC,eAAe,CAAC;YACzG,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,OAAQ,CAAC,qBAAqB,EAAE,CAAC;YAC/D,MAAM,QAAQ,GAAG,IAAI,GAAG,OAAO,CAAC;YAChC,MAAM,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC;YAE7B,OAAO,CACL,oBAAC,YAAY,IAAC,MAAM,EAAE,kBAAkB;gBACtC,oBAAC,eAAe,oBACV,WAAW,IACf,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,QAAQ,EACd,GAAG,EAAE,OAAO,IACZ,CACW,CAChB,CAAC;SACH;QAED,OAAO,CACL;YACE,oBAAC,MAAM,CAAC,SAAS,IACf,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,cAAc,EAAE,UAAU,EAC1B,aAAa,EAAE,aAAa,EAC5B,oBAAoB,EAAE,oBAAoB,GAC1C;YACD,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,eAAe,KAAI,CACrC,2CAAK,SAAS,EAAC,sBAAsB,IAAK,iBAAiB,CAAC,eAAe,EAAI,CAChF,CACA,CACJ,CAAC;IACJ,CAAC;IAED,OAAO,CACL,2CACE,IAAI,EAAC,UAAU,mBACA,MAAM,CAAC,GAAG,GAAG,CAAC,mBACd,UAAU,EACzB,GAAG,EAAE,eAAe,CAAC,OAAO,EAAE,GAAG,CAAC,EAClC,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE;YACL,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,EACD,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,EAC5F,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,EAC9D,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB,EAAE,aAAa,CAAC,EACtF,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB,EAAE,aAAa,CAAC,IAClF,KAAK,GAER,cAAc,EAAE,CACb,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAsE,CAAC","sourcesContent":["import React, { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { EditorContainer, EditorPortal } from './editors';\nimport { CellRendererProps } from './types';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  row,\n  rowIdx,\n  eventBus,\n  selectedCellProps,\n  onRowClick,\n  onKeyDown,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n  const isSelected = selectedCellProps !== undefined;\n  const isEditing = selectedCellProps?.mode === 'EDIT';\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex,\n      'rdg-cell-selected': isSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCell(openEditor?: boolean) {\n    eventBus.dispatch('SELECT_CELL', { idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCell();\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCell();\n  }\n\n  function handleDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    eventBus.dispatch('SELECT_ROW', { rowIdx, checked, isShiftClick });\n  }\n\n  function getCellContent() {\n    if (selectedCellProps && selectedCellProps.mode === 'EDIT') {\n      const { editorPortalTarget, ...editorProps } = selectedCellProps.editorContainerProps;\n      const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement || document.documentElement;\n      const { left, top } = cellRef.current!.getBoundingClientRect();\n      const gridLeft = left + docLeft;\n      const gridTop = top + docTop;\n\n      return (\n        <EditorPortal target={editorPortalTarget}>\n          <EditorContainer<R, SR>\n            {...editorProps}\n            rowIdx={rowIdx}\n            row={row}\n            column={column}\n            left={gridLeft}\n            top={gridTop}\n          />\n        </EditorPortal>\n      );\n    }\n\n    return (\n      <>\n        <column.formatter\n          column={column}\n          rowIdx={rowIdx}\n          row={row}\n          isCellSelected={isSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n        />\n        {selectedCellProps?.dragHandleProps && (\n          <div className=\"rdg-cell-drag-handle\" {...selectedCellProps.dragHandleProps} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onKeyDown={selectedCellProps ? wrapEvent(selectedCellProps.onKeyDown, onKeyDown) : onKeyDown}\n      onClick={isEditing ? onClick : wrapEvent(handleClick, onClick)}\n      onDoubleClick={isEditing ? onDoubleClick : wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={isEditing ? onContextMenu : wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR>) => JSX.Element;\n"]}