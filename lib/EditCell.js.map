{"version":3,"file":"EditCell.js","sourceRoot":"","sources":["../src/EditCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { forwardRef, useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport { EditorContainer, EditorContainer2, EditorPortal } from './editors';\nimport { CellRendererProps, SharedEditorContainerProps, SharedEditor2Props } from './types';\nimport { useCombinedRefs } from './hooks';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n| 'rowIdx'\n| 'row'\n| 'column'\n>;\n\ninterface EditCellRendererProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorPortalTarget: Element;\n  editorContainerProps: SharedEditorContainerProps;\n  editor2Props: SharedEditor2Props<R>;\n}\n\nfunction EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorPortalTarget,\n  editorContainerProps,\n  editor2Props,\n  onKeyDown,\n  ...props\n}: EditCellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    if (column.editor2 !== undefined) {\n      return (\n        <EditorContainer2\n          {...editor2Props}\n          editorPortalTarget={editorPortalTarget}\n          rowIdx={rowIdx}\n          column={column}\n          left={gridLeft}\n          top={gridTop}\n        />\n      );\n    }\n\n    const editor = (\n      <EditorContainer<R, SR>\n        {...editorContainerProps}\n        rowIdx={rowIdx}\n        row={row}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n\n    if (column.editorOptions?.createPortal !== false) {\n      return (\n        <EditorPortal target={editorPortalTarget}>\n          {editor}\n        </EditorPortal>\n      );\n    }\n\n    return editor;\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onKeyDown={onKeyDown}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n\nexport default forwardRef(EditCell) as <R, SR = unknown>(props: EditCellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n"]}