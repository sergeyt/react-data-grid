{"version":3,"file":"DataGrid.js","sourceRoot":"","sources":["../src/DataGrid.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EACZ,UAAU,EACV,QAAQ,EACR,MAAM,EACN,eAAe,EACf,SAAS,EACT,mBAAmB,EACnB,WAAW,EACX,aAAa,EACd,MAAM,OAAO,CAAC;AACf,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AACjF,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,gBAAgB,MAAM,YAAY,CAAC;AAC1C,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EACL,gBAAgB,EAChB,uBAAuB,EACvB,2BAA2B,EAC3B,sBAAsB,EACtB,WAAW,EACX,iBAAiB,EACjB,kBAAkB,EACnB,MAAM,SAAS,CAAC;AAkJjB;;;;;;EAME;AACF,SAAS,QAAQ,CAA2B;AAC1C,sBAAsB;AACtB,OAAO,EAAE,UAAU,EACnB,IAAI,EAAE,OAAO,EACb,WAAW,EACX,MAAM,EACN,YAAY,EACZ,YAAY;AACZ,mBAAmB;AACnB,SAAS,GAAG,EAAE,EACd,eAAe,GAAG,SAAS,EAC3B,mBAAmB,GAAG,EAAE;AACxB,gBAAgB;AAChB,YAAY,EACZ,oBAAoB,EACpB,UAAU,EACV,aAAa,EACb,MAAM,EACN,OAAO,EACP,eAAe,EACf,oBAAoB,EACpB,OAAO,EAAE,UAAU,EACnB,UAAU,EACV,gBAAgB,EAChB,wBAAwB;AACxB,mBAAmB;AACnB,WAAW,EAAE,WAAW,GAAG,GAAG,EAC9B,iBAAiB;AACjB,cAAc;AACd,UAAU,EACV,QAAQ,EACR,cAAc,EACd,oBAAoB,EACpB,qBAAqB;AACrB,oBAAoB;AACpB,aAAa,GAAG,KAAK,EACrB,mBAAmB,GAAG,KAAK,EAC3B,qBAAqB,GAAG,KAAK,EAC7B,kBAAkB,GAAG,MAAM;AAC3B,gBAAgB;AAChB,kBAAkB,GAAG,QAAQ,CAAC,IAAI,EAClC,SAAS,EACT,KAAK,EACL,QAAQ;AACR,OAAO;AACP,YAAY,EAAE,SAAS,EACvB,iBAAiB,EAAE,cAAc,EACjC,kBAAkB,EAAE,eAAe,EACnC,YAAY,EACY,EAAE,GAA8B;;IACxD;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC;IAClD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAA8B,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAC/F,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,QAAQ,CAAqC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IACtI,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAuC,IAAI,CAAC,CAAC;IACjG,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,CAAC,iBAAiB,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAqB,SAAS,CAAC,CAAC;IAEnF,MAAM,oBAAoB,GAAG,WAAW,CAAC,CAAC,MAAe,EAAE,EAAE;QAC3D,aAAa,CAAC,MAAM,CAAC,CAAC;QACtB,uBAAuB,CAAC,OAAO,GAAG,MAAM,CAAC;IAC3C,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP;;OAEG;IACH,MAAM,YAAY,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAClD,MAAM,oBAAoB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACtD,MAAM,uBAAuB,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC1D,MAAM,kBAAkB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAEtC;;OAEG;IACH,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,GAAG,iBAAiB,EAAE,CAAC;IAC7D,MAAM,eAAe,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,gBAAgB,SAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,mCAAI,CAAC,CAAC;IAClD,MAAM,iBAAiB,GAAG,eAAe,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtF,MAAM,YAAY,GAAG,UAAU,GAAG,iBAAiB,GAAG,gBAAgB,GAAG,SAAS,CAAC;IACnF,MAAM,YAAY,GAAG,YAAY,KAAK,SAAS,IAAI,oBAAoB,KAAK,SAAS,CAAC;IAEtF,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,sBAAsB,EAAE,OAAO,EAAE,GAAG,kBAAkB,CAAC;QAChI,UAAU;QACV,YAAY;QACZ,UAAU;QACV,aAAa,EAAE,SAAS;QACxB,oBAAoB;QACpB,UAAU;QACV,UAAU;KACX,CAAC,CAAC;IAEH,MAAM,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,eAAe,CAAC;QAC9F,OAAO;QACP,OAAO;QACP,UAAU;QACV,SAAS;QACT,YAAY;QACZ,SAAS;QACT,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,UAAU,CAAC;IACnD,MAAM,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAErC,IAAI,SAAS,EAAE;QACb,2CAA2C;QAC3C,qBAAqB,GAAG,KAAK,CAAC;KAC/B;IAED;;OAEG;IACH,eAAe,CAAC,GAAG,EAAE;QACnB,IAAI,gBAAgB,KAAK,oBAAoB,CAAC,OAAO,IAAI,gBAAgB,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;YAAE,OAAO;QAC3I,oBAAoB,CAAC,OAAO,GAAG,gBAAgB,CAAC;QAChD,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAE/B,IAAI,eAAe,CAAC,OAAO,EAAE;YAC3B,eAAe,CAAC,OAAO,GAAG,KAAK,CAAC;YAChC,OAAO;SACR;QACD,YAAY,CAAC,OAAQ,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,oBAAoB;YAAE,OAAO;QAElC,MAAM,wBAAwB,GAAG,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAkB,EAAE,EAAE;YACrF,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACzB,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;YAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;gBACnB,KAAK,MAAM,QAAQ,IAAI,GAAG,CAAC,SAAS,EAAE;oBACpC,IAAI,OAAO,EAAE;wBACX,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;qBACvC;yBAAM;wBACL,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC1C;iBACF;gBACD,oBAAoB,CAAC,eAAe,CAAC,CAAC;gBACtC,OAAO;aACR;YAED,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1B,IAAI,OAAO,EAAE;gBACX,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3B,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,CAAC;gBAClD,kBAAkB,CAAC,OAAO,GAAG,MAAM,CAAC;gBACpC,IAAI,YAAY,IAAI,cAAc,KAAK,CAAC,CAAC,IAAI,cAAc,KAAK,MAAM,EAAE;oBACtE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC;oBAChD,KAAK,IAAI,CAAC,GAAG,cAAc,GAAG,IAAI,EAAE,CAAC,KAAK,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE;wBAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,UAAU,CAAC,GAAG,CAAC;4BAAE,SAAS;wBAC9B,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;qBAClC;iBACF;aACF;iBAAM;gBACL,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;aACjC;YAED,oBAAoB,CAAC,eAAe,CAAC,CAAC;QACxC,CAAC,CAAC;QAEF,OAAO,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;IACnE,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,oBAAoB,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;IAE7E,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,wBAAwB;YAAE,OAAO;QAEtC,MAAM,WAAW,GAAG,CAAC,eAAwB,EAAE,EAAE;YAC/C,MAAM,mBAAmB,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACtD,IAAI,mBAAmB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;gBAC5C,mBAAmB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;aAC7C;iBAAM;gBACL,mBAAmB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;aAC1C;YACD,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,OAAO,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IACxD,CAAC,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAE3D,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC9B,cAAc,CAAC,GAAW;YACxB,YAAY,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACxB,CAAC;QACD,WAAW,CAAC,MAAc;YACxB,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;YAC5B,IAAI,CAAC,OAAO;gBAAE,OAAO;YACrB,OAAO,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC;QACzC,CAAC;QACD,UAAU;KACX,CAAC,CAAC,CAAC;IAEJ;;OAEG;IACH,SAAS,aAAa,CAAC,KAA0C;QAC/D,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE1C,IACE,mBAAmB;eAChB,iBAAiB,CAAC,KAAK,CAAC;eACxB,kBAAkB,CAAC,gBAAgB,CAAC;eACpC,CAAC,UAAU,CAAC,GAAG,CAAC;eAChB,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC,EAC9B;YACA,kCAAkC;YAClC,MAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,YAAY,KAAK,GAAG,EAAE;gBACxB,UAAU,EAAE,CAAC;gBACb,OAAO;aACR;YACD,IAAI,YAAY,KAAK,GAAG,EAAE;gBACxB,WAAW,EAAE,CAAC;gBACd,OAAO;aACR;SACF;QAED,IACE,kBAAkB,CAAC,gBAAgB,CAAC;eACjC,UAAU,CAAC,GAAG,CAAC;eACf,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC;eAC3B;YACD,2EAA2E;YAC3E,CAAC,GAAG,KAAK,WAAW,IAAI,GAAG,CAAC,UAAU,CAAC;gBACvC,0EAA0E;mBACvE,CAAC,GAAG,KAAK,YAAY,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAC7C,EAAE;YACH,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,qBAAqB;YAC7C,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;YACzC,OAAO;SACR;QAED,QAAQ,KAAK,CAAC,GAAG,EAAE;YACjB,KAAK,QAAQ;gBACX,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACxB,WAAW,EAAE,CAAC;gBACd,OAAO;YACT,KAAK,SAAS,CAAC;YACf,KAAK,WAAW,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY,CAAC;YAClB,KAAK,KAAK,CAAC;YACX,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK,CAAC;YACX,KAAK,QAAQ,CAAC;YACd,KAAK,UAAU;gBACb,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAChB,MAAM;YACR;gBACE,eAAe,CAAC,KAAK,CAAC,CAAC;gBACvB,MAAM;SACT;IACH,CAAC;IAED,SAAS,WAAW;QAClB,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,SAAS,YAAY,CAAC,KAAoC;QACxD,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC;QACtD,YAAY,CAAC,SAAS,CAAC,CAAC;QACxB,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,KAAK,EAAE;IACpB,CAAC;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,CAAC,MAA+B,EAAE,KAAa,EAAE,IAAa,EAAE,EAAE;QACvG,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;QAC9C,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACvC,eAAe,CAAC,eAAe,CAAC,CAAC;QAEjC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE;IAC5C,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC;IAEnC,SAAS,YAAY,CAAC,MAAc;QAClC,OAAO,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACjE,CAAC;IAED,SAAS,YAAY,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAe;QAC7D,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QAC9B,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG;YACb,OAAO;YACP,OAAO,EAAE,MAAM;YACf,KAAK,EAAE,MAAM;YACb,OAAO;YACP,MAAM,EAAE,aAAa;SACtB,EAAE;QAEH,WAAW,EAAE,CAAC;IAChB,CAAC;IAED,SAAS,oBAAoB;;QAC3B,IACE,OAAA,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,0CAAE,OAAO,MAAK,SAAS;eACjD,gBAAgB,CAAC,IAAI,KAAK,QAAQ;eAClC,gBAAgB,CAAC,GAAG,KAAK,gBAAgB,CAAC,WAAW,EAAE;YAC1D,OAAO;SACR;QAED,MAAM,WAAW,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;QACjC,WAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC;QAC1E,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,WAAW,EAAE;IAC9B,CAAC;IAED,SAAS,UAAU;QACjB,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;QACzC,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAc,CAAC,CAAC;QAC9D,iBAAiB,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,SAAS,WAAW;QAClB,IACE,cAAc,KAAK,IAAI;eACpB,CAAC,cAAc,CAAC,gBAAgB,CAAC;eACjC,CAAC,cAAc,CAAC,GAAG,KAAK,gBAAgB,CAAC,GAAG,IAAI,cAAc,CAAC,MAAM,KAAK,gBAAgB,CAAC,MAAM,CAAC,EACrG;YACA,OAAO;SACR;QAED,MAAM,OAAO,GAAG,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QACpD,MAAM,KAAK,GAAG,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QAElD,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG;YACb,OAAO;YACP,OAAO;YACP,KAAK;YACL,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC,KAAK,EAAsB;YAChE,MAAM,EAAE,YAAY;YACpB,WAAW;SACZ,EAAE;IACL,CAAC;IAED,SAAS,eAAe,CAAC,KAA0C;;QACjE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;YAAE,OAAO;QAClD,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,UAAU,CAAC,GAAG,CAAC;YAAE,OAAO;QAC5B,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;QACtB,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAE7C,IAAI,gBAAgB,CAAC,IAAI,KAAK,MAAM,EAAE;YACpC,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,iFAAiF;gBACjF,oBAAoB,EAAE,CAAC;gBACvB,WAAW,EAAE,CAAC;aACf;YACD,OAAO;SACR;QAED,YAAA,MAAM,CAAC,aAAa,0CAAE,aAAa,mDAAG,KAAK,EAAE;QAC7C,IAAI,KAAK,CAAC,kBAAkB,EAAE;YAAE,OAAO;QAEvC,IAAI,cAAc,CAAC,gBAAgB,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;YACjE,mBAAmB,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;gBACxC,GAAG;gBACH,MAAM;gBACN,GAAG;gBACH,IAAI,EAAE,MAAM;gBACZ,GAAG;gBACH,WAAW,EAAE,GAAG;aACjB,CAAC,CAAC,CAAC;SACL;IACH,CAAC;IAED,SAAS,aAAa;QACpB,IAAI,uBAAuB,CAAC,OAAO,KAAK,SAAS;YAAE,OAAO;QAE1D,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;QACzC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,OAAkB,CAAC,CAAC;QAElD,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG;YACb,OAAO;YACP,OAAO,EAAE,MAAM;YACf,KAAK,EAAE,uBAAuB,CAAC,OAAO;YACtC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAsB;YACjD,MAAM,EAAE,WAAW;SACpB,EAAE;QAEH,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,SAAS,eAAe,CAAC,KAAmD;QAC1E,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC;YAAE,OAAO;QAChC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAClD,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAE9C,SAAS,WAAW,CAAC,KAAiB;YACpC,mGAAmG;YACnG,0FAA0F;YAC1F,sEAAsE;YACtE,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC;gBAAE,SAAS,EAAE,CAAC;QACvC,CAAC;QAED,SAAS,SAAS;YAChB,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACrD,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACjD,WAAW,CAAC,KAAK,CAAC,CAAC;YACnB,aAAa,EAAE,CAAC;QAClB,CAAC;IACH,CAAC;IAED,SAAS,iBAAiB,CAAC,KAAuC;QAChE,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,MAAM,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAkB,CAAC,CAAC;QAEnE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG;YACb,OAAO;YACP,OAAO,EAAE,gBAAgB,CAAC,MAAM;YAChC,KAAK,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC;YACzB,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAsB;YACjD,MAAM,EAAE,aAAa;SACtB,EAAE;IACL,CAAC;IAED,SAAS,eAAe,CAAC,GAAgB,EAAE,aAAuB;QAChE,IAAI,gBAAgB,CAAC,IAAI,KAAK,QAAQ;YAAE,OAAO;QAC/C,IAAI,aAAa,EAAE;YACjB,MAAM,WAAW,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;YACjC,WAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;YACzD,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,WAAW,EAAE;YAC5B,WAAW,EAAE,CAAC;SACf;aAAM;YACL,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,iCAAM,QAAQ,KAAE,GAAG,IAAG,CAAC,CAAC;SACzD;IACH,CAAC;IAED,SAAS,aAAa,CAAC,aAAuB;QAC5C,IAAI,aAAa,EAAE;YACjB,oBAAoB,EAAE,CAAC;SACxB;QACD,WAAW,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,SAAS,kBAAkB,CAAC,EAAE,GAAG,EAAE,MAAM,EAAY;QACnD,OAAO,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;IACzF,CAAC;IAED,SAAS,cAAc,CAAC,QAAkB;QACxC,OAAO,kBAAkB,CAAC,QAAQ,CAAC;eAC9B,sBAAsB,CAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,UAAU,EAAE,CAAC,CAAC;IACvH,CAAC;IAED,SAAS,UAAU,CAAC,QAAkB,EAAE,YAAY,GAAG,KAAK;QAC1D,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YAAE,OAAO;QAC1C,oBAAoB,EAAE,CAAC;QAEvB,IAAI,YAAY,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5C,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAM,CAAC;YACvC,mBAAmB,iCAAM,QAAQ,KAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,IAAG,CAAC;SACtF;aAAM;YACL,mBAAmB,iCAAM,QAAQ,KAAE,IAAI,EAAE,QAAQ,IAAG,CAAC;SACtD;QACD,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,mBAAQ,QAAQ,GAAI;IAC1C,CAAC;IAED,SAAS,WAAW;QAClB,IAAI,gBAAgB,CAAC,IAAI,KAAK,QAAQ;YAAE,OAAO;QAC/C,mBAAmB,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,SAAS,YAAY,CAAC,EAAE,GAAG,EAAE,MAAM,EAAqB;QACtD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,OAAO;YAAE,OAAO;QAErB,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,qBAAqB,EAAE;YAC1D,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;YAChC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YACrC,MAAM,oBAAoB,GAAG,IAAI,GAAG,UAAU,GAAG,KAAK,GAAG,sBAAsB,CAAC;YAChF,MAAM,qBAAqB,GAAG,IAAI,GAAG,KAAK,GAAG,WAAW,GAAG,UAAU,CAAC;YACtE,IAAI,oBAAoB,IAAI,qBAAqB,EAAE;gBACjD,MAAM,aAAa,GAAG,uBAAuB,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;gBACrF,OAAO,CAAC,UAAU,GAAG,UAAU,GAAG,aAAa,CAAC;aACjD;SACF;QAED,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,IAAI,MAAM,GAAG,SAAS,GAAG,SAAS,EAAE;gBAClC,2CAA2C;gBAC3C,OAAO,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC;aACxC;iBAAM,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,SAAS,GAAG,YAAY,EAAE;gBAC9D,8EAA8E;gBAC9E,OAAO,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,YAAY,CAAC;aAC7D;SACF;IACH,CAAC;IAED,SAAS,eAAe,CAAC,GAAW,EAAE,OAAgB,EAAE,QAAiB;QACvE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;QACzC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,MAAM,aAAa,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;QAEzE,kGAAkG;QAClG,IACE,GAAG,KAAK,WAAW;eAChB,aAAa;eACb,UAAU,CAAC,GAAG,CAAC;eACf,CAAC,GAAG,CAAC,UAAU;eACf,GAAG,CAAC,KAAK,KAAK,CAAC,EAClB;YACA,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrD,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE;oBAC1D,YAAY,GAAG,CAAC,CAAC;oBACjB,MAAM;iBACP;aACF;YACD,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;gBACvB,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC;aACtC;SACF;QAED,QAAQ,GAAG,EAAE;YACX,KAAK,SAAS;gBACZ,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,KAAK,WAAW;gBACd,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,KAAK,WAAW;gBACd,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC;YAClC,KAAK,YAAY;gBACf,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC;YAClC,KAAK,KAAK;gBACR,IAAI,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;oBACjE,OAAO,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;iBAChG;gBACD,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC;YACpD,KAAK,MAAM;gBACT,sDAAsD;gBACtD,IAAI,aAAa;oBAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;gBAC7C,OAAO,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC;YAC9D,KAAK,KAAK;gBACR,sDAAsD;gBACtD,IAAI,aAAa;oBAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC3D,OAAO,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC;YAC9G,KAAK,QAAQ;gBACX,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC,EAAE,CAAC;YACxE,KAAK,UAAU;gBACb,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC,EAAE,CAAC;YACxE;gBACE,OAAO,gBAAgB,CAAC;SAC3B;IACH,CAAC;IAED,SAAS,QAAQ,CAAC,KAA0C;QAC1D,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;QAChC,MAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,YAAY,GAAG,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC3D,IAAI,IAAI,GAAG,kBAAkB,CAAC;QAC9B,IAAI,GAAG,KAAK,KAAK,EAAE;YACjB,gFAAgF;YAChF,IAAI,WAAW,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,CAAC,EAAE;gBACpG,oFAAoF;gBACpF,OAAO;aACR;YAED,IAAI,GAAG,kBAAkB,KAAK,MAAM;gBAClC,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,kBAAkB,CAAC;SACxB;QAED,8BAA8B;QAC9B,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,YAAY,GAAG,2BAA2B,CAAQ;YAChD,OAAO;YACP,SAAS,EAAE,IAAI,CAAC,MAAM;YACtB,kBAAkB,EAAE,IAAI;YACxB,YAAY;SACb,CAAC,CAAC;QAEH,UAAU,CAAC,YAAY,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,qBAAqB,CAAC,aAAqB;QAClD,IAAI,iBAAiB,KAAK,SAAS;YAAE,OAAO;QAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;QAEpC,MAAM,aAAa,GAAG,MAAM,GAAG,iBAAiB;YAC9C,CAAC,CAAC,MAAM,GAAG,aAAa,IAAI,aAAa,IAAI,iBAAiB;YAC9D,CAAC,CAAC,MAAM,GAAG,aAAa,IAAI,aAAa,IAAI,iBAAiB,CAAC;QAEjE,OAAO,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1D,CAAC;IAED,SAAS,oBAAoB,CAAC,MAAc;QAC1C,IAAI,gBAAgB,CAAC,MAAM,KAAK,MAAM;YAAE,OAAO;QAE/C,IAAI,gBAAgB,CAAC,IAAI,KAAK,MAAM,EAAE;YACpC,OAAO;gBACL,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,gBAAgB,CAAC,GAAG;gBACzB,SAAS,EAAE,aAAa;gBACxB,kBAAkB;gBAClB,oBAAoB,EAAE;oBACpB,SAAS;oBACT,UAAU;oBACV,SAAS;oBACT,mBAAmB,EAAE,gBAAgB,CAAC,GAAG;oBACzC,QAAQ,EAAE,YAAY;oBACtB,cAAc,EAAE,WAAW;iBAC5B;gBACD,YAAY,EAAE;oBACZ,SAAS;oBACT,GAAG,EAAE,gBAAgB,CAAC,GAAG;oBACzB,WAAW,EAAE,eAAe;oBAC5B,OAAO,EAAE,aAAa;iBACvB;aACF,CAAC;SACH;QAED,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,GAAG,EAAE,gBAAgB,CAAC,GAAG;YACzB,OAAO,EAAE,WAAW;YACpB,SAAS,EAAE,aAAa;YACxB,eAAe,EAAE,qBAAqB,IAAI,cAAc,CAAC,gBAAgB,CAAC;gBACxE,CAAC,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE;gBACpE,CAAC,CAAC,SAAS;SACd,CAAC;IACJ,CAAC;IAED,SAAS,eAAe;;QACtB,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,KAAK,IAAI,MAAM,GAAG,mBAAmB,EAAE,MAAM,IAAI,iBAAiB,EAAE,MAAM,EAAE,EAAE;YAC5E,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,MAAM,GAAG,GAAG,MAAM,GAAG,SAAS,GAAG,iBAAiB,CAAC;YACnD,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;gBACnB,CAAC,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,CAAC;gBAC1B,WAAW,CAAC,IAAI,CACd,oBAAC,gBAAgB,kBACH,GAAG,CAAC,KAAK,GAAG,CAAC,kBACX,GAAG,CAAC,OAAO,mBACV,GAAG,CAAC,QAAQ,GAAG,CAAC,mBAChB,eAAe,GAAG,aAAa,GAAG,CAAC,EAClD,GAAG,EAAE,GAAG,CAAC,EAAE,EACX,EAAE,EAAE,GAAG,CAAC,EAAE,EACV,QAAQ,EAAE,GAAG,CAAC,QAAQ,EACtB,eAAe,EAAE,eAAe,EAChC,SAAS,EAAE,GAAG,CAAC,SAAS,EACxB,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,GAAG,CAAC,KAAK,EAChB,UAAU,EAAE,GAAG,CAAC,UAAU,EAC1B,eAAe,EAAE,gBAAgB,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EACtF,aAAa,EAAE,YAAY,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,CAAC,EAAE,CAAC,MAAO,CAAC,CAAC,CAAC,EACxF,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,gBAAgB,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EACrE,SAAS,EAAE,gBAAgB,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,GACzE,CACH,CAAC;gBACF,SAAS;aACV;YAED,aAAa,EAAE,CAAC;YAChB,IAAI,GAAG,GAAoB,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC;YAC9D,IAAI,aAAa,GAAG,KAAK,CAAC;YAC1B,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC1B,aAAa,SAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,CAAC,KAAK,oCAAK,KAAK,CAAC;gBAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC1D,GAAG,GAAG,KAAK,CAAC;iBACb;aACF;YAED,WAAW,CAAC,IAAI,CACd,oBAAC,WAAW,qBACK,eAAe,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,mBAC1D,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EACvD,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,eAAe,EAAE,eAAe,EAChC,QAAQ,EAAE,QAAQ,EAClB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,GAAG,EAAE,GAAG,EACR,aAAa,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,MAAK,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EACjF,kBAAkB,EAAE,qBAAqB,CAAC,MAAM,CAAC,EACjD,oBAAoB,EAAE,UAAU,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,SAAS,EACnE,iBAAiB,EAAE,oBAAoB,CAAC,MAAM,CAAC,GAC/C,CACH,CAAC;SACH;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,+GAA+G;IAC/G,IAAI,gBAAgB,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;QACpF,mBAAmB,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC7D,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxB,oBAAoB,CAAC,SAAS,CAAC,CAAC;KACjC;IAED,IAAI,gBAAgB,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,WAAW,EAAE;QACtG,mDAAmD;QACnD,WAAW,EAAE,CAAC;KACf;IAED,OAAO,CACL,6BACE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,gBACzB,SAAS,qBACJ,cAAc,sBACb,eAAe,0BACX,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,mBACtC,OAAO,CAAC,MAAM,mBACd,eAAe,GAAG,SAAS,GAAG,gBAAgB,EAC7D,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,uBAAuB,EAAE,UAAU,EAAE,EAAE,SAAS,CAAC,EAC1E,KAAK,EAAE,gCACF,KAAK,KACR,qBAAqB,EAAE,GAAG,eAAe,IAAI,EAC7C,qBAAqB,EAAE,GAAG,mBAAmB,IAAI,EACjD,aAAa,EAAE,GAAG,gBAAgB,IAAI,EACtC,cAAc,EAAE,GAAG,SAAS,IAAI,GACC,EACnC,GAAG,EAAE,OAAO,EACZ,QAAQ,EAAE,YAAY;QAEtB,oBAAC,SAAS,IACR,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,OAAO,EACb,OAAO,EAAE,eAAe,EACxB,cAAc,EAAE,kBAAkB,EAClC,eAAe,EAAE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,MAAK,OAAO,CAAC,MAAM,EACtD,oBAAoB,EAAE,oBAAoB,EAC1C,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,aAAa,EAC5B,MAAM,EAAE,MAAM,GACd;QACD,aAAa,IAAI,CAChB,oBAAC,SAAS,IACR,OAAO,EAAE,eAAe,EACxB,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,eAAe,GAChC,CACH;QACA,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAC3E;YACE,6BACE,GAAG,EAAE,YAAY,EACjB,QAAQ,EAAE,CAAC,EACX,SAAS,EAAC,gBAAgB,EAC1B,SAAS,EAAE,aAAa,GACxB;YACF,6BAAK,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,YAAY,CAAC,EAAE,GAAI;YAC1E,eAAe,EAAE,EACjB,WAAW,aAAX,WAAW;YAAX,WAAW,CAAE,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CACjC,oBAAC,UAAU,qBACM,eAAe,GAAG,SAAS,GAAG,MAAM,GAAG,CAAC,EACvD,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,SAAS,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,EACrD,eAAe,EAAE,eAAe,GAChC,CACH,EACA,CACJ,CACG,CACP,CAAC;AACJ,CAAC;AAED,eAAe,UAAU,CACvB,QAA0D,CACkE,CAAC","sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useEffect,\n  useImperativeHandle,\n  useCallback,\n  createElement\n} from 'react';\nimport clsx from 'clsx';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows } from './hooks';\nimport EventBus from './EventBus';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKey,\n  getColumnScrollPosition,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput\n} from './utils';\n\nimport {\n  CalculatedColumn,\n  CheckCellIsEditableEvent,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  RowsUpdateEvent,\n  SelectRowEvent,\n  CommitEvent,\n  SelectedCellProps,\n  EditCellProps,\n  Dictionary\n} from './types';\nimport { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, K extends keyof R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The primary key property of each row */\n  rowKey?: K;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onRowsUpdate?: <E extends RowsUpdateEvent>(event: E) => void;\n  onRowsChange?: (rows: R[]) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<R[K]>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<R[K]>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Dictionary<readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number, done?: boolean) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?: (event: CheckCellIsEditableEvent<R, SR>) => boolean;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilters?: boolean;\n  enableCellCopyPaste?: boolean;\n  enableCellDragAndDrop?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n  /** To support getting nested fields */\n  getCellValue?: (row: R, column: CalculatedColumn<R, SR>) => unknown;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, K extends keyof R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKey,\n  onRowsUpdate,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onCheckCellIsEditable,\n  // Toggles and modes\n  enableFilters = false,\n  enableCellCopyPaste = false,\n  enableCellDragAndDrop = false,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = document.body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  getCellValue\n}: DataGridProps<R, K, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [eventBus] = useState(() => new EventBus());\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedPosition, setCopiedPosition] = useState<Position & { value: unknown } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilters ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilters ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy,\n    rowGrouper\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  if (hasGroups) {\n    // Cell drag is not supported on a treegrid\n    enableCellDragAndDrop = false;\n  }\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus();\n  });\n\n  useEffect(() => {\n    if (!onSelectedRowsChange) return;\n\n    const handleRowSelectionChange = ({ rowIdx, checked, isShiftClick }: SelectRowEvent) => {\n      assertIsValidKey(rowKey);\n      const newSelectedRows = new Set(selectedRows);\n      const row = rows[rowIdx];\n      if (isGroupRow(row)) {\n        for (const childRow of row.childRows) {\n          if (checked) {\n            newSelectedRows.add(childRow[rowKey]);\n          } else {\n            newSelectedRows.delete(childRow[rowKey]);\n          }\n        }\n        onSelectedRowsChange(newSelectedRows);\n        return;\n      }\n\n      const rowId = row[rowKey];\n      if (checked) {\n        newSelectedRows.add(rowId);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        lastSelectedRowIdx.current = rowIdx;\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n          const step = Math.sign(rowIdx - previousRowIdx);\n          for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n            const row = rows[i];\n            if (isGroupRow(row)) continue;\n            newSelectedRows.add(row[rowKey]);\n          }\n        }\n      } else {\n        newSelectedRows.delete(rowId);\n        lastSelectedRowIdx.current = -1;\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n    };\n\n    return eventBus.subscribe('SelectRow', handleRowSelectionChange);\n  }, [eventBus, isGroupRow, onSelectedRowsChange, rowKey, rows, selectedRows]);\n\n  useEffect(() => {\n    return eventBus.subscribe('SelectCell', selectCell);\n  });\n\n  useEffect(() => {\n    if (!onExpandedGroupIdsChange) return;\n\n    const toggleGroup = (expandedGroupId: unknown) => {\n      const newExpandedGroupIds = new Set(expandedGroupIds);\n      if (newExpandedGroupIds.has(expandedGroupId)) {\n        newExpandedGroupIds.delete(expandedGroupId);\n      } else {\n        newExpandedGroupIds.add(expandedGroupId);\n      }\n      onExpandedGroupIdsChange(newExpandedGroupIds);\n    };\n\n    return eventBus.subscribe('ToggleGroup', toggleGroup);\n  }, [eventBus, expandedGroupIds, onExpandedGroupIdsChange]);\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTop = rowIdx * rowHeight;\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      enableCellCopyPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n    ) {\n      // key may be uppercase `C` or `V`\n      const lowerCaseKey = key.toLowerCase();\n      if (lowerCaseKey === 'c') {\n        handleCopy();\n        return;\n      }\n      if (lowerCaseKey === 'v') {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      eventBus.dispatch('ToggleGroup', row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedPosition(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number, done: boolean) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width, done);\n  }, [columnWidths, onColumnResize]);\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function handleCommit({ cellKey, rowIdx, updated }: CommitEvent) {\n    rowIdx = getRawRowIdx(rowIdx);\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: rowIdx,\n      updated,\n      action: 'CELL_UPDATE'\n    });\n\n    closeEditor();\n  }\n\n  function commitEditor2Changes() {\n    if (\n      columns[selectedPosition.idx]?.editor2 === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.(updatedRows);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    const value = rawRows[rawRowIdx][columns[idx].key as keyof R];\n    setCopiedPosition({ idx, rowIdx, value });\n  }\n\n  function handlePaste() {\n    if (\n      copiedPosition === null\n      || !isCellEditable(selectedPosition)\n      || (copiedPosition.idx === selectedPosition.idx && copiedPosition.rowIdx === selectedPosition.rowIdx)\n    ) {\n      return;\n    }\n\n    const fromRow = getRawRowIdx(copiedPosition.rowIdx);\n    const fromCellKey = columns[copiedPosition.idx].key;\n    const toRow = getRawRowIdx(selectedPosition.rowIdx);\n    const cellKey = columns[selectedPosition.idx].key;\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow,\n      toRow,\n      updated: { [cellKey]: copiedPosition.value } as unknown as never,\n      action: 'COPY_PASTE',\n      fromCellKey\n    });\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditor2Changes();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    if (latestDraggedOverRowIdx.current === undefined) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const cellKey = column.key;\n    const value = rawRows[rowIdx][cellKey as keyof R];\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: latestDraggedOverRowIdx.current,\n      updated: { [cellKey]: value } as unknown as never,\n      action: 'CELL_DRAG'\n    });\n\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n\n    const column = columns[selectedPosition.idx];\n    const cellKey = column.key;\n    const value = rawRows[selectedPosition.rowIdx][cellKey as keyof R];\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: selectedPosition.rowIdx,\n      toRow: rawRows.length - 1,\n      updated: { [cellKey]: value } as unknown as never,\n      action: 'COLUMN_FILL'\n    });\n  }\n\n  function handleRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.(updatedRows);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditor2Changes();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, onCheckCellIsEditable, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditor2Changes();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver = rowIdx < draggedOverRowIdx\n      ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n      : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorPortalTarget,\n        editorContainerProps: {\n          rowHeight,\n          scrollLeft,\n          scrollTop,\n          firstEditorKeyPress: selectedPosition.key,\n          onCommit: handleCommit,\n          onCommitCancel: closeEditor\n        },\n        editor2Props: {\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(cr[rowKey!]))}\n            eventBus={eventBus}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: string | number = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (rowKey !== undefined) {\n        const rowId = row[rowKey];\n        isRowSelected = selectedRows?.has(rowId) ?? false;\n        if (typeof rowId === 'string' || typeof rowId === 'number') {\n          key = rowId;\n        }\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          eventBus={eventBus}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedPosition?.rowIdx === rowIdx ? copiedPosition.idx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setCopiedPosition(null);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, K, SR>\n        rowKey={rowKey}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilters && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && emptyRowsRenderer ? createElement(emptyRowsRenderer) : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(\n  DataGrid as React.ForwardRefRenderFunction<DataGridHandle>\n) as <R, K extends keyof R, SR = unknown>(props: DataGridProps<R, K, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n"]}